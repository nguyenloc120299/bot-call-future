import ccxt from "ccxt";
import { calculateBollingerBands, calculateLongSLTP, calculateRSI, calculateShortSLTP } from "./handlers";
import { initCaculate } from "../config";
import { PAIR_STATE } from "../types/global";
import TelegramBot from 'node-telegram-bot-api'
import { envsConfig } from "../config/envs";

const exchange = new ccxt.binanceusdm({
    enableRateLimit: true,
    options: {
        defaultType: 'future',
    },
})
const bot = new TelegramBot(envsConfig.token_tele, { polling: true });

const pairState = {} as PAIR_STATE; // State l∆∞u tr·∫°ng th√°i


// Function ƒë·ªÉ x·ª≠ l√Ω khi SL/TP ƒë∆∞·ª£c k√≠ch ho·∫°t
async function handleSLTPTriggers(symbol, result) {
    // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa c·∫∑p giao d·ªãch
    if (pairState[symbol]) {
        const { state, entry, sl, tp, time } = pairState[symbol];
        const endTime = new Date() as any;
        const timeDiffInHours = (endTime - time) / 1000 / 60 / 60;
        const days = Math.floor(timeDiffInHours / 24);
        const hours = timeDiffInHours % 24;
        console.log(`L·ªánh ƒë√£ ch·∫°m ${result} cho c·∫∑p giao d·ªãch ${symbol}`);
        console.log(`L·ªánh giao d·ªãch ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.`);
        const message = `
                        L·ªánh ƒë√£ ch·∫°m ${result} cho c·∫∑p giao d·ªãch ${symbol}
                        L·ªánh giao d·ªãch ƒë√£ ƒë∆∞·ª£c ƒë√≥ng trong ${days} ng√†y ${hours} gi·ªù. üëä 
                    `;
        bot.sendMessage(envsConfig.chat_id, message);
        // Reset tr·∫°ng th√°i c·ªßa c·∫∑p giao d·ªãch
        delete pairState[symbol];

    }
}
async function runTradingStrategy() {
    try {
        console.log(`=== Run ${new Date().toLocaleString()} ===`);

        const markets = await exchange.fetchMarkets(); // l·∫•y c√°c c·∫∑p giao d·ªãch
        for (const market of markets) {
            const symbol = market.symbol;
            // const baseCurrency = market.base;
            const quoteCurrency = market.quote;
            const timeframe = '1h'; // Khung th·ªùi gian H1
            // Ki·ªÉm tra c·∫∑p giao d·ªãch c√≥ ti·ªÅn t·ªá l√† USDT
            if (quoteCurrency !== 'USDT') {
                continue; // B·ªè qua c·∫∑p giao d·ªãch kh√¥ng li√™n quan ƒë·∫øn USDT
            }
            // L·∫•y d·ªØ li·ªáu gi√° c·∫£ t·ª´ s√†n giao d·ªãch cho t·ª´ng c·∫∑p giao d·ªãch (coin)
            const candles = await exchange.fetchOHLCV(symbol, timeframe);

            if (!candles) continue
            // T√≠nh to√°n Bollinger Bands


            const bollingerBands = calculateBollingerBands(candles, initCaculate.pollingerBandPeriod, initCaculate.stdDevMultiplier);

            // X√°c ƒë·ªãnh ƒëi·ªÉm v√†o giao d·ªãch d·ª±a tr√™n Bollinger Bands
            const lastCandle = candles[candles.length - 1];
            const lastClose = lastCandle[4]; // Gi√° ƒë√≥ng c·ª≠a g·∫ßn nh·∫•t
            const upperBand = bollingerBands.upperBand[bollingerBands.upperBand.length - 1];
            const lowerBand = bollingerBands.lowerBand[bollingerBands.lowerBand.length - 1];

            /// T√≠nh to√°n RSI 
            const closePrices = candles.map(candle => candle[4]); // M·∫£ng gi√° ƒë√≥ng c·ª≠a
            const rsiValues = calculateRSI(closePrices, initCaculate.rsiPeriod);
            const lastRSI = rsiValues[rsiValues.length - 1];
            if (pairState[symbol]) {
                const { state, sl, tp } = pairState[symbol];
                const lastPrice = lastClose
                if (state === 'long' && (lastPrice <= sl || lastPrice >= tp)) {
                    const result = lastPrice <= sl ? "Stoploss ‚ùå" : "Take Profit üòè"
                    handleSLTPTriggers(symbol, result);
                }
                else if (state === 'short' && (lastPrice >= sl || lastPrice <= tp)) {
                    const result = lastPrice <= sl ? "Stoploss ‚ùå" : "Take Profit üòè"
                    handleSLTPTriggers(symbol, result)
                }
            }
            else {
                if (lastClose > upperBand && lastRSI > 70) {
                    const entryPrice = lastClose;
                    const { stopLoss, takeProfit } = calculateShortSLTP(entryPrice)
                    pairState[symbol] = {
                        state: 'short',
                        entry: entryPrice,
                        sl: stopLoss,
                        tp: takeProfit,
                        time: new Date()
                    };
                    const message = `
                        üöÄ ƒêi·ªÉm short (b√°n) giao d·ªãch ${symbol}

                        üéØ Entry Price: ${entryPrice}

                        ‚úÖ Take Profit: ${takeProfit}

                        ‚ùå Stop Loss: ${stopLoss}
                     
                    `;
                    bot.sendMessage(envsConfig.chat_id, message);

                    console.log(`ƒêi·ªÉm short (b√°n) giao d·ªãch ${symbol}`);
                    console.log(`Entry Price: ${entryPrice}`);
                    console.log(`Stop Loss: ${stopLoss}`);
                    console.log(`Take Profit: ${takeProfit}`);
                }
                else if (lastClose < lowerBand && lastRSI < 30) {
                    const entryPrice = lastClose;
                    const { stopLoss, takeProfit } = calculateLongSLTP(entryPrice)
                    pairState[symbol] = {
                        state: 'long',
                        entry: entryPrice,
                        sl: stopLoss,
                        tp: takeProfit,
                        time: new Date()
                    };

                    const message = `
                        üöÄ ƒêi·ªÉm long (mua) giao d·ªãch ${symbol}

                        üéØ Entry Price: ${entryPrice}

                        ‚úÖ Take Profit: ${takeProfit}
                        
                        ‚ùå Stop Loss: ${stopLoss}
                        
                     `;
                    bot.sendMessage(envsConfig.chat_id, message);

                    console.log(`ƒêi·ªÉm long (mua) giao d·ªãch ${symbol}`);
                    console.log(`Entry Price: ${entryPrice}`);
                    console.log(`Stop Loss: ${stopLoss}`);
                    console.log(`Take Profit: ${takeProfit}`);
                }
            }
        }
    } catch (error) {
        console.log("c√≥ l·ªói x·∫£y ra", error);

    }

}
async function runOnce() {
    try {

        await runTradingStrategy();
    } catch (error) {
        console.error('ƒê√£ x·∫£y ra l·ªói:', error);
    }
}
export default runOnce